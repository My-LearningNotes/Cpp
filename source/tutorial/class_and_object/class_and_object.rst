C++类的定义和对象的创建
=======================

类和对象是C++的重要特性，它们使得C++成为面向对象的编程语言。

类是创建对象的模板，一个类可以创建多个对象，每个对象都是类类型的一个变量，创建对象的过程也叫类的\ **实例化**\ 。
每个对象都是类的一个具体\ **实例(Instance)**\，拥有类的成员变量和成员函数。

.. note::

    通常，将类的成员变量成为类的\ **属性(Property)**\ , 将类的成员函数成为类的\ **方法(Method)**\ 。
    在面向对象的编程语言中，经常把函数(Function)成为方法(Method)。

与结构体一样，类只是一种复杂数据类型的声明，不占用内存空间。
而对象是类这种数据类型的一个变量，或者说是通过类这种数据类型创建出来的一份实实在在的数据，所以占用内存空间。


类的定义
--------

类是用户自定义的类型，在使用类创建对象之前，要先定义类。

Example:

.. code-block:: cpp
    :emphasize-lines: 1, 2, 3, 11

    class Student
    {
    public:
        // 成员变量
        char *name;
        int age;
        flaot score;

        // 成员函数
        void say();
    };

* ``class``\ 是C++中新增的关键字，专门用来定义类；
* ``Student``\ 是类的名称，类名的首字母通常大写；
* ``{}``\ 内部是类所包含的成员变量和成员函数，它们统称为类的\ **成员(Member)**\ , 由\ ``{}``\ 包围起来的部分有时也称为\ **类体**\ ，和函数体的概念类似；
* ``public``\ 也是C++新增的关键字，它只能用在类的定义中，表示类的成员变量或成员函数具有"公开"的访问权限。

.. attention::

    在类定义的最后有一个分号\ ``;``\ , 它是类定义的一部分，表示类定义结束了，不能省略。

类只是一个模板(Template), 编译后不占用内存空间，所以在定义类时不能对成员变量进行初始化，因为没有地方存储数据。
只有在创建对象之后才会给成员变量分配内存，这个时候就可以赋值了。

类可以理解为一种新的数据类型，与char、int、float等基本数据类型不同的是，类是一种由用于自定义的复合数据类型。

类通常定义在函数的外面，当然也可以定义在函数的内部，不过很少这样用。

.. note::

    类定义的位置(在哪个作用域定义的)，决定了它的作用范围。

创建对象
--------

有了类之后，就可以创建对象了。

在创建对象时，\ ``class``\ 关键字可要可不要，但是出于习惯我们通常会省略\ ``class``\ 关键字。
除了创建单个对象，还可以创建对象数组。

Example:

.. code-block:: cpp

    class Student stu1;
    Student stu2;

    Student arr[100];


访问类的成员
------------

创建对象以后，可以使用点号\ ``.``\ 来访问成员变量和成员函数，这和通过结构体变量来访问它的成员类似。


使用对象指针
------------

在栈上创建出来的对象都有一个名字，使用指针指向它不是必须的。
但是通过\ ``new``\ 创建出来的对象就不一样了，它在堆上分配内存，没有名字，只能得到一个指向它的指针，所以必须使用一个指针变量来接收这个指针，否则以后再也无法找到这个对象了，更没有办法使用它。
**也就是说，使用new创建出来的对象是匿名的，没法直接使用，必须要用一个指针指向它，再借助指针来访问它的成员变量或成员函数。**

栈内存是程序自动管理的，不能使用\ ``delete``\ 删除在栈上创建的对象；堆内存由程序员管理，对象使用完毕后可以通过\ ``delete``\ 删除。
在实际开发中，\ ``new``\ 和\ ``delete``\ 往往成对出现，以保证及时删除不再使用的对象，防止无用内存堆积。

有了对象指针后，可以通过箭头\ ``->``\ 来访问对象的成员变量和成员函数，这和通过结构体指针来访问它的成员类似。


