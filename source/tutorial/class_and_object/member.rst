C++类的成员变量和成员函数
=========================

类的成员变量和普通变量一样，也有数据类型和名称，占用固定长度的内存。
但是，在定义类的时候不能对成员变量赋值，因为类只是一种数据类型或者说是一种模板，本身不占用内存空间，而变量的值则需要内存来存储。

类的成员函数也和普通函数一样，都有返回值和参数列表，它与普通函数的区别是：成员函数是一个类的成员，出现在类体中，它的作用范围由类来决定；
而普通函数是独立的，作用范围是全局的，或位于某个命名空间内。


作用域解析运算符\ ``::``
------------------------

* 在类体中直接定义函数时，不需要在函数名前面加上类名，因为函数属于哪一个类是不言而喻的；
* 但当成员函数定义在类外时，就必须在函数名前面加上类名予以限定。
  ``::``\ 被称为\ **域解析符（也称作用域运算符或作用域限定符）**\ ，用来连接类名和函数名，指明当前函数属于哪个类。
  **成员函数必须先在类体中作原型声明，然后在类外定义，也就是说类体的位置应该在函数定义之前。**


在类体中和类体外定义成员函数的区别
----------------------------------

在类体中和类体外定义成员函数是有区别的：在类体中定义的成员函数会自动成为内联函数，在类体外定义的则不会。
当然，在类体内部定义的函数也可以加\ ``inline``\ 关键字，但这是多余的，因为类体内部定义的函数默认就是内联函数。

内联函数一般不是我们所期望的，它会将函数调用处用函数体替代，所以建议在类体内部对成员函数作声明，而在类体外部进行定义，这是一种良好的编程习惯。
当然，如果函数比较短小，也可以定义为内联函数。

如果既希望将函数定义在类体外部，又希望它是内联函数，那么可以在定义函数时加上\ ``inline``\ 关键字。

Example:

.. code-block:: cpp
    :emphasize-lines: 12

    class Student
    {
    public:
        char *name;
        int age;
        float score;

        void say();
    };

    // 函数定义
    inline void Student::say()
    {
        // ...
    }

这种在类体外定义\ ``inline``\ 函数的方式，必须将类的声明和成员函数的定义都放在同一个头文件中(或者同一个源文件中)，否则编译时无法进行嵌入(将函数代码嵌入到函数调用处)。

.. note::

    在编译时，普通的函数调用处，会用函数的入口地址替代，在执行时，根据函数的入口地址跳转到函数执行。所以，编译器在编译时只需要知道函数的入口地址，不需要知道函数的具体实现。
    而对于内联函数，会用函数的实现代码来替换函数调用。所以，对于内联函数，编译器在编译时就需要知道其实现，所以需要将内联函数的实现和类的声明放在一起。


类成员的访问权限
----------------

C++通过\ ``public``\ 、\ ``protected``\ 和\ ``private``\ 三个关键字来控制成员变量和成员函数的访问权限，它们被称为\ **成员访问限定符**\ 。
所谓访问权限，就是你能不能使用类中的成员。

在类的内部（定义类的代码内部），无论成员被声明为\ ``public``\ 、\ ``protected``\ 还是\ ``private``\ ，都是可以相互访问的，没有访问权限的限制。
在类的外部（定义类的代码之外），只能访问\ ``public``\ 属性的成员，不能访问\ ``private``\ 、\ ``protected``\ 属性的成员。

类的声明和成员函数的定义都是类定义的一部分，在实际开发中，我们通常将类的声明放在头文件中，而将成员函数的定义放在源文件中。


声明为private的成员和声明为public的成员的次序任意，既可以先出现private部分，也可以先出现public部分。
如果既不写private也不写public，默认为private。

在一个类体中，private和public可以分别出现多次。
每个部分的有效范围到出现另一个访问限定符或类体结束。
但是为了程序清晰，应该养成这样的习惯，使每一种成员访问限定符在类体中只出现一次。


简单地谈类的封装
----------------

``private``\ 关键字的作用在于更好地隐藏类的内部实现，该向外暴露的接口都声明为\ ``public``\ ，不希望外部知道、或者只在类内部使用的、或者对外没有影响的成员，都建议声明为\ ``private``\ 。
另外还有一个关键字\ ``protected``\ ，声明为\ ``protected``\ 的成员在类外也不能访问，但是在它的派生类内部可以访问。

将成员变量都声明为\ ``private``\ ，如何给它们赋值呢？又如何读取它们的值呢？
可以额外添加两个\ ``public``\ 属性的成员函数，一个用来设置成员变量的值，一个用来获取成员变量的值，这两个函数称为\ **存取器方法**\ 。
给成员变量赋值的函数通常成为\ **set函数**, 它们的名字通常以\ ``set``\ 开头，后跟成员变量的名字；
读取成员变量的值的函数通常成为\ **get函数**\ ，它们的名字通常以\ ``get``\ 开头，后跟成员变量的名字，或者直接以变量名作为函数名。
除了set函数和get函数，在创建对象时还可以调用构造函数来初始化各个成员变量。不过构造函数只能给成员变量赋值一次，以后再修改还得借助set函数。

这种将成员变量声明为private，将部分成员函数声明为public的做法体现了类的封装性。
所谓封装，是指尽量隐藏类的内部实现，只向用户提供有用的成员函数。

有人可能会觉得，额外添加set函数和get函数麻烦，直接将成员变量设置为public比较方便。
但是，将成员变量设置为private是C++的一种软件设计规范，尤其是在中大型项目中，还是应该遵守这一原则。

.. note::

    如果可以直接对成员变量进行修改，那么可能会在无意间修改了成员变量。
    通过存取器方法来访问成员变量，我们在调用存取器方法的时候，清楚的知道我们在做什么。
    这样就提供了一种机制，可以避免程序员无意间对成员变量的修改。

    这是C++的风格，在Python中，则不提倡使用存取器方法，而是直接对成员变量进行操作，由程序员自己来保证操作的安全性。

