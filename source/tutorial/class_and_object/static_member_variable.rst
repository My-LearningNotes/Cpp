C++静态成员变量
===============

对象的内存中包含了成员变量，不同的对象占用不同的内存，这使得不同对象的成员变量相互独立，它们的值不受其它对象的影响。
可是有时候我们希望多个对象之间共享数据。

.. note::

    共享数据的典型使用场景是计数。

在C++中，可以使用静态成员变量来实现多个对象共享数据的目标。静态成员变量是一种特殊的成员变量，它被关键字\ ``static``\ 修饰。

Example:

.. code-block:: cpp
    :emphasize-lines: 8

    class Student
    {
    public:
        Student(char *name,  int age,  float score);
        void show();

    public:
        static int m_total; // 静态成员变量

    private:
        char *m_name;
        int m_age;
        float m_score;
    };

静态成员变量属于类，不属于某个具体的对象，即使创建多个对象，也只为静态成员变量分配一份内存，所有对象使用的都是这份内存中的数据。

静态成员变量必须在类声明的外部初始化(通常是在cpp文件中，类体外)，具体形式为:

.. code-block:: cpp

    type class::name = value;

``type``\ 是变量的类型，\ ``class``\ 是类名, \ ``name``\ 是变量名, \ ``value``\ 是初始值。

静态成员变量在初始化时不能再加\ ``static``\ 关键字，但必须要有数据类型。
被\ ``private``\ 、\ ``protected``\ 、\ ``public``\ 修饰的静态成员变量都可以用这种方式初始化。

.. note::

    静态成员变量的内存不是在声明类时分配，也不是在创建对象时分配，而是在(类外)初始化时分配。
    反过来说，没有在类外初始化的static成员变量不能使用。

静态成员变量既可以通过对象来访问，也可以通过类来访问。


几点说明
--------

* 一个类中可以有一个或多个静态成员变量，所有的对象共享这些静态成员变量。

* 静态成员变量和普通静态变量一样，都在内存分区中的全局数据区分配内存，到程序结束时才释放。
  这就意味着，静态成员变量不随对象的创建而分配内存，也不随对象的销毁而释放内存。
  而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。

* 静态成员变量必须初始化(分配内存)，而且只能在类体外进行(通常是在cpp文件中)。
  初始化时可以赋值，也可以不赋值。如果不赋值，那么会被自动初始化为0(未初始化的静态变量)。
  在程序运行时，静态成员变量的内存分配和初始化是在操作系统加载程序之后，\ ``main()``\ 函数运行之前执行的。

.. note::

    注意区分两个概念: 

    * 在代码中对静态成员变量进行初始化的位置；
    * 程序运行时，静态成员变量分配内存和初始化的时机。

* 静态成员变量既可以通过对象名访问，也可以通过类名访问，但要遵循\ ``private``\ 、\ ``protected``\ 和\ ``public``\ 关键字的访问权限限制。
  当通过对象名访问时，对于不同的对象，访问的是同一份内存。

